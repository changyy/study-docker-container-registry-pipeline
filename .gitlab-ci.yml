variables:
  DOCKER_IMAGE_NAME_FOR_LARAVEL_PROJECT: "myapp-php-fpm"
  DOCKER_IMAGE_NAME_FOR_NGINX: "myapp-nginx"
  DOCKER_TLS_CERTDIR: "/certs"
  PHP_IMAGE_PATH: "$CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME_FOR_LARAVEL_PROJECT"
  NGINX_IMAGE_PATH: "$CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME_FOR_NGINX"
  ECS_CLUSTER: "myapp-cluster"
  ECS_SERVICE: "myapp-service"

stages:
  - prepare
  - build
  - cleanup
  - deploy

composer:
  stage: prepare
  image: php:8.4-cli
  before_script:
    - apt-get update && apt-get install -y unzip libzip-dev
    - docker-php-ext-install zip
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
  script:
    # https://gitlab.com/gitlab-org/project-templates/laravel/-/blob/main/.gitlab-ci.yml?ref_type=heads
    - cd www
    - composer install --no-dev --optimize-autoloader
    - php artisan optimize
  rules:
    - if: $CI_COMMIT_TAG =~ /^web\-v\d+\.\d+\.\d+$/  # 符合版本號格式如 web-v1.2.3
    - if: $CI_COMMIT_TAG =~ /^app\-v\d+\.\d+\.\d+$/  # 符合版本號格式如 app-v1.2.3
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "api"'

npm:
  stage: prepare
  image: node:22
  dependencies:
    - composer
  script:
    - cd www
    - npm install
    - npm run build
  rules:
    - if: $CI_COMMIT_TAG =~ /^web\-v\d+\.\d+\.\d+$/  # 符合版本號格式如 web-v1.2.3
    - if: $CI_COMMIT_TAG =~ /^app\-v\d+\.\d+\.\d+$/  # 符合版本號格式如 app-v1.2.3
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "api"'
      when: on_success

web_docker_image_build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - composer
    - npm
  before_script:
    - apk add --no-cache curl jq git
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    - |
      LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "no tags")
      TAG_DATE=$(git log -1 --format=%ai $LATEST_TAG 2>/dev/null || echo "")
      cat > www/public/version.json << EOF
      {
        "version": "$CI_COMMIT_TAG",
        "commit": "$CI_COMMIT_SHA",
        "date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
        "pipeline": "${CI_PIPELINE_ID}",
        "latest_tag": "$LATEST_TAG",
        "tag_date": "$TAG_DATE"
      }
      EOF
    - cat www/public/version.json 
    - docker info
    - docker build -t $DOCKER_IMAGE_NAME_FOR_NGINX:latest -f docker/nginx/Dockerfile .
    - docker save $DOCKER_IMAGE_NAME_FOR_NGINX:latest > $DOCKER_IMAGE_NAME_FOR_NGINX.image.tar
    - docker tag $DOCKER_IMAGE_NAME_FOR_NGINX:latest $NGINX_IMAGE_PATH:${TIMESTAMP}_${CI_COMMIT_SHA}
    - docker tag $DOCKER_IMAGE_NAME_FOR_NGINX:latest $NGINX_IMAGE_PATH:latest
    - docker push $NGINX_IMAGE_PATH:${TIMESTAMP}_${CI_COMMIT_SHA}
    - docker push $NGINX_IMAGE_PATH:latest
  artifacts:
    paths:
      - $DOCKER_IMAGE_NAME_FOR_NGINX.image.tar
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG =~ /^web\-v\d+\.\d+\.\d+$/  # 符合版本號格式如 web-v1.2.3
    - if: $CI_COMMIT_TAG =~ /^app\-v\d+\.\d+\.\d+$/  # 符合版本號格式如 app-v1.2.3
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "api"'
      when: on_success

app_docker_image_build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - composer
    - npm
  before_script:
    - apk add --no-cache curl jq git
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    - |
      LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "no tags")
      TAG_DATE=$(git log -1 --format=%ai $LATEST_TAG 2>/dev/null || echo "")
      cat > www/public/version.json << EOF
      {
        "version": "$CI_COMMIT_TAG",
        "commit": "$CI_COMMIT_SHA",
        "date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
        "pipeline": "${CI_PIPELINE_ID}",
        "latest_tag": "$LATEST_TAG",
        "tag_date": "$TAG_DATE"
      }
      EOF
    - docker info
    - docker build -t $DOCKER_IMAGE_NAME_FOR_LARAVEL_PROJECT:latest -f docker/php-fpm/Dockerfile .
    - docker save $DOCKER_IMAGE_NAME_FOR_LARAVEL_PROJECT:latest > $DOCKER_IMAGE_NAME_FOR_LARAVEL_PROJECT.image.tar
    - docker tag $DOCKER_IMAGE_NAME_FOR_LARAVEL_PROJECT:latest $PHP_IMAGE_PATH:${TIMESTAMP}_${CI_COMMIT_SHA}
    - docker tag $DOCKER_IMAGE_NAME_FOR_LARAVEL_PROJECT:latest $PHP_IMAGE_PATH:latest
    - docker push $PHP_IMAGE_PATH:${TIMESTAMP}_${CI_COMMIT_SHA}
    - docker push $PHP_IMAGE_PATH:latest
  artifacts:
    paths:
      - $DOCKER_IMAGE_NAME_FOR_LARAVEL_PROJECT.image.tar
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG =~ /^app\-v\d+\.\d+\.\d+$/  # 符合版本號格式如 app-v1.2.3
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "api"'
      when: on_success

cleanup_images:
  stage: cleanup
  image: docker:latest
  variables:
    GIT_STRATEGY: none
  before_script:
    - apk add --no-cache curl jq
    - echo "CI_API_V4_URL = ${CI_API_V4_URL}"
    - echo "CI_PROJECT_ID = ${CI_PROJECT_ID}"
    # https://docs.gitlab.com/ee/api/container_registry.html
    - echo "CI_REGISTRY_PASSWORD = ${CI_REGISTRY_PASSWORD}"
    - echo "CI_JOB_TOKEN = ${CI_JOB_TOKEN}" 
    - echo "API REQUEST URL = ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/registry/repositories"
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/registry/repositories" | jq '.' 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - |
      REGISTRY_TARGET=$(curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/registry/repositories" | jq -r '. | if length > 0 then .[].id else empty end')
      for REGISTRY_ID in $REGISTRY_TARGET; do
        echo "REGISTRY_ID = $REGISTRY_ID"
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/registry/repositories/${REGISTRY_ID}/tags"
        REGISTRY_LAST_TAG=$(curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/registry/repositories/${REGISTRY_ID}/tags" | jq -r '[ .[] | select(.name != "latest") ] | sort_by(.name) | if length > 3 then .[:-3] | .[].name else empty end')
        for REGISTRY_TAG in $REGISTRY_LAST_TAG; do
          echo "REGISTRY_ID = $REGISTRY_ID, REGISTRY_TAG = $REGISTRY_TAG"
          curl --request DELETE  --header "JOB-TOKEN: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/registry/repositories/${REGISTRY_ID}/tags/${REGISTRY_TAG}"
        done
      done
  rules:
    - if: $CI_COMMIT_TAG =~ /^web\-v\d+\.\d+\.\d+$/  # 符合版本號格式如 web-v1.2.3
      when: on_success
    - if: $CI_COMMIT_TAG =~ /^app\-v\d+\.\d+\.\d+$/  # 符合版本號格式如 app-v1.2.3
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "api"'
      when: on_success

deploy_to_ecs:
  stage: deploy
  image: alpine:latest
  needs:
    - job: web_docker_image_build
      optional: true
    - job: app_docker_image_build
      optional: true
  before_script:
    - apk add --no-cache aws-cli curl jq tree bash
    - echo "AWS_ACCESS_KEY_ID = ${AWS_ACCESS_KEY_ID}"
    - echo "AWS_SECRET_ACCESS_KEY = ${AWS_SECRET_ACCESS_KEY}"
    - echo "AWS_DEFAULT_REGION = ${AWS_DEFAULT_REGION}"
    - echo "ECS_DEPLOY_ENABLE = ${ECS_DEPLOY_ENABLE}" 
    - echo "ECS_CLUSTER = ${ECS_CLUSTER}" 
    - echo "ECS_SERVICE = ${ECS_SERVICE}" 
  script:
    - chmod +x tool/aws/ecs-update-service.sh
    - bash tool/aws/ecs-update-service.sh
  rules:
    - if: $CI_COMMIT_TAG =~ /^web\-v\d+\.\d+\.\d+$/
      when: on_success
    - if: $CI_COMMIT_TAG =~ /^app\-v\d+\.\d+\.\d+$/ 
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "api"'
      when: on_success
 
